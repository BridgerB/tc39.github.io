- title: Function.prototype.toString revision
  description: for functions defined using ECMAScript code, toString must return source text slice from beginning of first token to end of last token matched by the appropriate grammar production
  authors:
    - Michael Ficarra
  champions:
    - Michael Ficarra
  tests:
    - https://github.com/tc39/test262/issues/1163
  specification: http://tc39.github.io/Function-prototype-toString-revision/
  resources:
    - https://github.com/tc39/Function-prototype-toString-revision

- title: global
  description: ECMAScript Proposal, specs, and reference implementation for GLOBAL_PLACEHOLDER
  authors:
    - Jordan Harband
  champions:
    - Jordan Harband
  tests:
    - https://github.com/tc39/test262/issues/765
  specification: http://tc39.github.io/Function-prototype-toString-revision/
  resources:
    - https://tc39.github.io/proposal-global/

- title: import()
  description: Adding a "function-like" import() module loading syntactic form to JavaScript
  authors:
    - Domenic Denicola
  champions:
    - Domenic Denicola
  tests:
    - https://github.com/tc39/test262/issues/1164
  specification: https://tc39.github.io/ecma262/#sec-modules
  example: >
    const main = document.querySelector("main");
      for (const link of document.querySelectorAll("nav > a")) {
        link.addEventListener("click", e => {
          e.preventDefault();

          import(`./section-modules/${link.dataset.entryModule}.js`)
            .then(module => {
              module.loadPageInto(main);
            })
            .catch(err => {
              main.textContent = err.message;
            });
        });
      }

- title: Legacy RegExp features in JavaScript
  description: This is a specification draft for the legacy (deprecated) RegExp features in JavaScript, i.e., static properties of the constructor like RegExp.$1 as well as the RegExp.prototype.compile method.
  authors:
    - Claude Pache
  champions:
    - Mark Miller
    - Claude Pache
  tests:
    - https://github.com/tc39/test262/issues/1165
  resources:
    - https://github.com/tc39/proposal-regexp-legacy-features

- title: BigInt
  description: Arbitrary precision integers in JavaScript
  authors:
    - Daniel Ehrenberg
  champions:
    - Daniel Ehrenberg
  tests:
    - https://github.com/tc39/test262/issues/1056
  resources:
    - https://github.com/tc39/proposal-bigint

- title: import.meta
  description: A proposal for adding an import.meta metaproperty to JavaScript, for holding host-specific metadata about the current module.
  authors:
    - Domenic Denicola
  champions:
    - Domenic Denicola
  tests:
    - https://github.com/tc39/test262/issues/1342
  specification: https://tc39.github.io/proposal-import-meta/
  resources:
    - https://github.com/tc39/proposal-import-meta

- title: Private instance methods and accessors
  description: Keeping state and behavior private to a class lets library authors present a clear, stable interface, while changing their code over time behind the scenes.
  authors:
    - Daniel Ehrenberg
  champions:
    - Daniel Ehrenberg
    - Kevin Gibbons
  tests:
    - https://github.com/tc39/test262/issues/1343
  resources:
    - https://github.com/tc39/proposal-private-methods

- title: Array.prototype.{flat,flatMap}
  description: Proposal for flatten and flatMap on arrays
  authors:
    - Brian Terlson
    - Michael Ficarra
  champions:
    - Brian Terlson
    - Michael Ficarra
  resources:
    - https://github.com/tc39/proposal-flatMap

- title: Class Public Instance Fields & Private Instance Fields
  description: This proposes a combined vision for public fields and private fields, drawing on the earlier Orthogonal Classes and Class Evaluation Order proposals.
  authors:
    - Daniel Ehrenberg
    - Kevin Gibbons
  champions:
    - Daniel Ehrenberg
    - Jeff Morrison
    - Kevin Smith
    - Kevin Gibbons
  tests:
    - https://github.com/tc39/test262/issues/1161
  specification: https://tc39.github.io/proposal-class-fields/
  resources:
    - https://github.com/tc39/proposal-numeric-separator

- title: Static class fields and private static methods

- title: String.prototype.{trimStart,trimEnd}
  description: A proposal to extend ECMA-262 syntax into a superset of JSON.
  authors:
    - Sebastian Markbåge
  champions:
    - Sebastian Markbåge
  tests:
    - https://github.com/tc39/test262/pull/1246
  resources:
    - https://tc39.github.io/proposal-string-left-right-trim/

- title: String.prototype.matchAll
  description: If given a string, and either a sticky or a global regular expression which has multiple capturing groups, we often want to iterate through all of the matches.
  authors:
    - Jordan Harband
  champions:
    - Jordan Harband
  tests:
    - https://github.com/tc39/test262/pull/1500
    - https://github.com/tc39/test262/pull/1587
  resources:
    - https://tc39.github.io/proposal-string-matchall/

- title: Symbol.prototype.description
  description: Expose the [[Description]] internal slot of a symbol directly instead of just indirectly through Symbol.prototype.toString.
  authors:
    - Michael Ficarra
  champions:
    - Michael Ficarra
  tests:
    - https://github.com/tc39/test262/pull/1590
  resources:
    - https://tc39.github.io/proposal-Symbol-description/

- title: Object.fromEntries
  description: A proposal for a new static method Object.fromEntries in ECMAScript for transforming a list of key-value pairs into an object.
  authors:
    - Darien Maillet Valentine
  champions:
    - Jordan Harband
    - Kevin Gibbons
  tests:
    - https://github.com/tc39/test262/pull/1677
    - https://github.com/tc39/test262/pull/1676
  resources:
    - https://tc39.github.io/proposal-object-from-entries/

- title: Well-formed JSON.stringify
  description: A proposal to prevent JSON.stringify from returning ill-formed Unicode strings.
  authors:
    - Richard Gibson
  champions:
    - Mathias Bynens
  tests:
    - https://github.com/tc39/test262/pull/1787
  specification: https://tc39.github.io/proposal-well-formed-stringify/
  resources:
    - https://tc39.github.io/proposal-well-formed-stringify/

